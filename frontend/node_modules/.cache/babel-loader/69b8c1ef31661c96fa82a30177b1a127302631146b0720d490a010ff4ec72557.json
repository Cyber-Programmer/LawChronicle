{"ast":null,"code":"// Phase progress management utilities\nexport const PHASE_STATUS = {\n  LOCKED: 'locked',\n  READY: 'ready',\n  IN_PROGRESS: 'in-progress',\n  COMPLETED: 'completed'\n};\n// Update phase progress in localStorage\nexport const updatePhaseProgress = (phaseId, status, progress) => {\n  try {\n    const existingData = localStorage.getItem('phase_progress');\n    const progressData = existingData ? JSON.parse(existingData) : {};\n    progressData[phaseId] = {\n      status,\n      progress\n    };\n    localStorage.setItem('phase_progress', JSON.stringify(progressData));\n  } catch (error) {\n    console.error('Error updating phase progress:', error);\n  }\n};\n\n// Get phase progress from localStorage\nexport const getPhaseProgress = phaseId => {\n  try {\n    const existingData = localStorage.getItem('phase_progress');\n    if (!existingData) return null;\n    const progressData = JSON.parse(existingData);\n    return progressData[phaseId] || null;\n  } catch (error) {\n    console.error('Error getting phase progress:', error);\n    return null;\n  }\n};\n\n// Get all phase progress data\nexport const getAllPhaseProgress = () => {\n  try {\n    const existingData = localStorage.getItem('phase_progress');\n    return existingData ? JSON.parse(existingData) : {};\n  } catch (error) {\n    console.error('Error getting all phase progress:', error);\n    return {};\n  }\n};\n\n// Mark phase as completed\nexport const completePhase = phaseId => {\n  updatePhaseProgress(phaseId, PHASE_STATUS.COMPLETED, 100);\n};\n\n// Mark phase as in progress\nexport const startPhase = phaseId => {\n  updatePhaseProgress(phaseId, PHASE_STATUS.IN_PROGRESS, 0);\n};\n\n// Update phase progress percentage\nexport const updatePhaseProgressPercentage = (phaseId, progress) => {\n  try {\n    const existingData = localStorage.getItem('phase_progress');\n    const progressData = existingData ? JSON.parse(existingData) : {};\n    if (progressData[phaseId]) {\n      progressData[phaseId].progress = Math.min(100, Math.max(0, progress));\n      localStorage.setItem('phase_progress', JSON.stringify(progressData));\n    }\n  } catch (error) {\n    console.error('Error updating phase progress percentage:', error);\n  }\n};\n\n// Reset all phase progress\nexport const resetAllPhaseProgress = () => {\n  try {\n    localStorage.removeItem('phase_progress');\n  } catch (error) {\n    console.error('Error resetting phase progress:', error);\n  }\n};\n\n// Check if a phase is completed\nexport const isPhaseCompleted = phaseId => {\n  const progress = getPhaseProgress(phaseId);\n  return (progress === null || progress === void 0 ? void 0 : progress.status) === PHASE_STATUS.COMPLETED;\n};\n\n// Check if a phase is ready to start\nexport const isPhaseReady = phaseId => {\n  const progress = getPhaseProgress(phaseId);\n  return (progress === null || progress === void 0 ? void 0 : progress.status) === PHASE_STATUS.READY;\n};\n\n// Check if a phase is in progress\nexport const isPhaseInProgress = phaseId => {\n  const progress = getPhaseProgress(phaseId);\n  return (progress === null || progress === void 0 ? void 0 : progress.status) === PHASE_STATUS.IN_PROGRESS;\n};\n\n// Check if a phase is locked\nexport const isPhaseLocked = phaseId => {\n  const progress = getPhaseProgress(phaseId);\n  return (progress === null || progress === void 0 ? void 0 : progress.status) === PHASE_STATUS.LOCKED;\n};","map":{"version":3,"names":["PHASE_STATUS","LOCKED","READY","IN_PROGRESS","COMPLETED","updatePhaseProgress","phaseId","status","progress","existingData","localStorage","getItem","progressData","JSON","parse","setItem","stringify","error","console","getPhaseProgress","getAllPhaseProgress","completePhase","startPhase","updatePhaseProgressPercentage","Math","min","max","resetAllPhaseProgress","removeItem","isPhaseCompleted","isPhaseReady","isPhaseInProgress","isPhaseLocked"],"sources":["d:/DigiFloat/LawChronicle/frontend/src/utils/phaseProgress.ts"],"sourcesContent":["// Phase progress management utilities\r\nexport const PHASE_STATUS = {\r\n  LOCKED: 'locked',\r\n  READY: 'ready',\r\n  IN_PROGRESS: 'in-progress',\r\n  COMPLETED: 'completed'\r\n};\r\n\r\nexport interface PhaseProgress {\r\n  status: string;\r\n  progress: number;\r\n}\r\n\r\nexport interface PhaseProgressData {\r\n  [phaseId: number]: PhaseProgress;\r\n}\r\n\r\n// Update phase progress in localStorage\r\nexport const updatePhaseProgress = (phaseId: number, status: string, progress: number): void => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    const progressData: PhaseProgressData = existingData ? JSON.parse(existingData) : {};\r\n    \r\n    progressData[phaseId] = { status, progress };\r\n    localStorage.setItem('phase_progress', JSON.stringify(progressData));\r\n  } catch (error) {\r\n    console.error('Error updating phase progress:', error);\r\n  }\r\n};\r\n\r\n// Get phase progress from localStorage\r\nexport const getPhaseProgress = (phaseId: number): PhaseProgress | null => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    if (!existingData) return null;\r\n    \r\n    const progressData: PhaseProgressData = JSON.parse(existingData);\r\n    return progressData[phaseId] || null;\r\n  } catch (error) {\r\n    console.error('Error getting phase progress:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get all phase progress data\r\nexport const getAllPhaseProgress = (): PhaseProgressData => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    return existingData ? JSON.parse(existingData) : {};\r\n  } catch (error) {\r\n    console.error('Error getting all phase progress:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n// Mark phase as completed\r\nexport const completePhase = (phaseId: number): void => {\r\n  updatePhaseProgress(phaseId, PHASE_STATUS.COMPLETED, 100);\r\n};\r\n\r\n// Mark phase as in progress\r\nexport const startPhase = (phaseId: number): void => {\r\n  updatePhaseProgress(phaseId, PHASE_STATUS.IN_PROGRESS, 0);\r\n};\r\n\r\n// Update phase progress percentage\r\nexport const updatePhaseProgressPercentage = (phaseId: number, progress: number): void => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    const progressData: PhaseProgressData = existingData ? JSON.parse(existingData) : {};\r\n    \r\n    if (progressData[phaseId]) {\r\n      progressData[phaseId].progress = Math.min(100, Math.max(0, progress));\r\n      localStorage.setItem('phase_progress', JSON.stringify(progressData));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating phase progress percentage:', error);\r\n  }\r\n};\r\n\r\n// Reset all phase progress\r\nexport const resetAllPhaseProgress = (): void => {\r\n  try {\r\n    localStorage.removeItem('phase_progress');\r\n  } catch (error) {\r\n    console.error('Error resetting phase progress:', error);\r\n  }\r\n};\r\n\r\n// Check if a phase is completed\r\nexport const isPhaseCompleted = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.COMPLETED;\r\n};\r\n\r\n// Check if a phase is ready to start\r\nexport const isPhaseReady = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.READY;\r\n};\r\n\r\n// Check if a phase is in progress\r\nexport const isPhaseInProgress = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.IN_PROGRESS;\r\n};\r\n\r\n// Check if a phase is locked\r\nexport const isPhaseLocked = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.LOCKED;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}