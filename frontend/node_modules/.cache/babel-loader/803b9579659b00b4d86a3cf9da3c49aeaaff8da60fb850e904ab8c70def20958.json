{"ast":null,"code":"var _jsxFileName = \"D:\\\\DigiFloat\\\\LawChronicle\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const checkAuth = async () => {\n    const storedToken = localStorage.getItem('token');\n    if (!storedToken) {\n      setIsAuthenticated(false);\n      setUser(null);\n      setToken(null);\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const response = await authService.getCurrentUser();\n      const userData = response.data;\n      setIsAuthenticated(true);\n      setUser(userData);\n      setToken(storedToken);\n    } catch (error) {\n      // Token is invalid, remove it\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n      setUser(null);\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      setIsLoading(true);\n      const response = await authService.login(username, password);\n      const {\n        access_token\n      } = response.data;\n\n      // Store token immediately\n      localStorage.setItem('token', access_token);\n      setToken(access_token);\n\n      // Get user info\n      const userResponse = await authService.getCurrentUser();\n      const userData = userResponse.data;\n\n      // Update state immediately - this will trigger UI re-render\n      setIsAuthenticated(true);\n      setUser(userData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Login failed'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call logout API if needed\n      await authService.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.warn('Logout API call failed:', error);\n    } finally {\n      // Clear local state and storage immediately - this will trigger UI re-render\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n      setUser(null);\n      setToken(null);\n    }\n  };\n\n  // Initialize authentication state on mount\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const value = {\n    isAuthenticated,\n    user,\n    token,\n    isLoading,\n    login,\n    logout,\n    checkAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5OzTzfBVdi/iXEfb+LP4kIkehBI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","token","setToken","isLoading","setIsLoading","checkAuth","storedToken","localStorage","getItem","response","getCurrentUser","userData","data","error","removeItem","login","username","password","access_token","setItem","userResponse","success","Error","message","logout","console","warn","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["D:/DigiFloat/LawChronicle/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\ninterface User {\r\n  user_id: string;\r\n  username: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  token: string | null;\r\n  isLoading: boolean;\r\n  login: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;\r\n  logout: () => Promise<void>;\r\n  checkAuth: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const checkAuth = async () => {\r\n    const storedToken = localStorage.getItem('token');\r\n    \r\n    if (!storedToken) {\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setToken(null);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await authService.getCurrentUser();\r\n      const userData = response.data;\r\n      \r\n      setIsAuthenticated(true);\r\n      setUser(userData);\r\n      setToken(storedToken);\r\n    } catch (error) {\r\n      // Token is invalid, remove it\r\n      localStorage.removeItem('token');\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setToken(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      const response = await authService.login(username, password);\r\n      const { access_token } = response.data;\r\n      \r\n      // Store token immediately\r\n      localStorage.setItem('token', access_token);\r\n      setToken(access_token);\r\n      \r\n      // Get user info\r\n      const userResponse = await authService.getCurrentUser();\r\n      const userData = userResponse.data;\r\n      \r\n      // Update state immediately - this will trigger UI re-render\r\n      setIsAuthenticated(true);\r\n      setUser(userData);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : 'Login failed' \r\n      };\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Call logout API if needed\r\n      await authService.logout();\r\n    } catch (error) {\r\n      // Continue with logout even if API call fails\r\n      console.warn('Logout API call failed:', error);\r\n    } finally {\r\n      // Clear local state and storage immediately - this will trigger UI re-render\r\n      localStorage.removeItem('token');\r\n      setIsAuthenticated(false);\r\n      setUser(null);\r\n      setToken(null);\r\n    }\r\n  };\r\n\r\n  // Initialize authentication state on mount\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const value: AuthContextType = {\r\n    isAuthenticated,\r\n    user,\r\n    token,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    checkAuth,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}