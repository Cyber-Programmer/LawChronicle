{"ast":null,"code":"// Phase 5 API service for statute grouping operations\n\nconst API_BASE = 'http://localhost:8000/api/v1/phase5';\nexport class Phase5ApiService {\n  static getAuthToken() {\n    return localStorage.getItem('token');\n  }\n  static async makeRequest(endpoint, options = {}) {\n    const token = this.getAuthToken();\n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        }),\n        ...options.headers\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        detail: 'Unknown error'\n      }));\n      throw new Error(errorData.detail || `Request failed: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  // Get current Phase 5 status\n  static async getStatus() {\n    return this.makeRequest('/status');\n  }\n\n  // Start the grouping process\n  static async startGrouping(request = {}) {\n    return this.makeRequest('/start-grouping', {\n      method: 'POST',\n      body: JSON.stringify(request)\n    });\n  }\n\n  // Get progress stream using Server-Sent Events\n  static createProgressStream() {\n    const token = this.getAuthToken();\n    const url = new URL(`${API_BASE}/progress-stream`);\n    if (token) {\n      url.searchParams.append('token', token);\n    }\n    return new EventSource(url.toString());\n  }\n\n  // Get grouped statutes (paginated)\n  static async getGroups(page = 1, limit = 20, filters) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value) params.append(key, value);\n      });\n    }\n    return this.makeRequest(`/groups?${params}`);\n  }\n\n  // Get statutes within a specific group\n  static async getGroupedStatutes(groupId, page = 1, limit = 20) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    return this.makeRequest(`/groups/${groupId}/statutes?${params}`);\n  }\n\n  // Clear all grouping data (for development/testing)\n  static async clearGroups() {\n    return this.makeRequest('/clear', {\n      method: 'POST'\n    });\n  }\n\n  // Get grouping statistics\n  static async getStatistics() {\n    return this.makeRequest('/statistics');\n  }\n\n  // Export grouped data\n  static async exportGroups(format = 'json') {\n    const token = this.getAuthToken();\n    const response = await fetch(`${API_BASE}/export?format=${format}`, {\n      headers: {\n        ...(token && {\n          'Authorization': `Bearer ${token}`\n        })\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Export failed: ${response.statusText}`);\n    }\n    return response.blob();\n  }\n}","map":{"version":3,"names":["API_BASE","Phase5ApiService","getAuthToken","localStorage","getItem","makeRequest","endpoint","options","token","response","fetch","headers","ok","errorData","json","catch","detail","Error","statusText","getStatus","startGrouping","request","method","body","JSON","stringify","createProgressStream","url","URL","searchParams","append","EventSource","toString","getGroups","page","limit","filters","params","URLSearchParams","Object","entries","forEach","key","value","getGroupedStatutes","groupId","clearGroups","getStatistics","exportGroups","format","blob"],"sources":["d:/DigiFloat/LawChronicle/frontend/src/components/phase5/apiService.ts"],"sourcesContent":["// Phase 5 API service for statute grouping operations\r\n\r\nimport type { \r\n  Phase5Status, \r\n  StartGroupingRequest, \r\n  StartGroupingResponse,\r\n  GroupsResponse,\r\n  GroupedStatutesResponse\r\n} from './types';\r\n\r\nconst API_BASE = 'http://localhost:8000/api/v1/phase5';\r\n\r\nexport class Phase5ApiService {\r\n  private static getAuthToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  private static async makeRequest<T>(\r\n    endpoint: string, \r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    const token = this.getAuthToken();\r\n    const response = await fetch(`${API_BASE}${endpoint}`, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\r\n      throw new Error(errorData.detail || `Request failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Get current Phase 5 status\r\n  static async getStatus(): Promise<Phase5Status> {\r\n    return this.makeRequest<Phase5Status>('/status');\r\n  }\r\n\r\n  // Start the grouping process\r\n  static async startGrouping(request: StartGroupingRequest = {}): Promise<StartGroupingResponse> {\r\n    return this.makeRequest<StartGroupingResponse>('/start-grouping', {\r\n      method: 'POST',\r\n      body: JSON.stringify(request),\r\n    });\r\n  }\r\n\r\n  // Get progress stream using Server-Sent Events\r\n  static createProgressStream(): EventSource {\r\n    const token = this.getAuthToken();\r\n    const url = new URL(`${API_BASE}/progress-stream`);\r\n    if (token) {\r\n      url.searchParams.append('token', token);\r\n    }\r\n    return new EventSource(url.toString());\r\n  }\r\n\r\n  // Get grouped statutes (paginated)\r\n  static async getGroups(\r\n    page: number = 1, \r\n    limit: number = 20,\r\n    filters?: {\r\n      province?: string;\r\n      statute_type?: string;\r\n      base_name?: string;\r\n    }\r\n  ): Promise<GroupsResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString(),\r\n    });\r\n\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value) params.append(key, value);\r\n      });\r\n    }\r\n\r\n    return this.makeRequest<GroupsResponse>(`/groups?${params}`);\r\n  }\r\n\r\n  // Get statutes within a specific group\r\n  static async getGroupedStatutes(\r\n    groupId: string,\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<GroupedStatutesResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString(),\r\n    });\r\n\r\n    return this.makeRequest<GroupedStatutesResponse>(`/groups/${groupId}/statutes?${params}`);\r\n  }\r\n\r\n  // Clear all grouping data (for development/testing)\r\n  static async clearGroups(): Promise<{ success: boolean; message: string }> {\r\n    return this.makeRequest('/clear', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Get grouping statistics\r\n  static async getStatistics(): Promise<{\r\n    total_groups: number;\r\n    total_statutes: number;\r\n    groups_by_province: Record<string, number>;\r\n    groups_by_type: Record<string, number>;\r\n    average_versions_per_group: number;\r\n  }> {\r\n    return this.makeRequest('/statistics');\r\n  }\r\n\r\n  // Export grouped data\r\n  static async exportGroups(format: 'json' | 'csv' = 'json'): Promise<Blob> {\r\n    const token = this.getAuthToken();\r\n    const response = await fetch(`${API_BASE}/export?format=${format}`, {\r\n      headers: {\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Export failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.blob();\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}