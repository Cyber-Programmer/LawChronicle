{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import{FileText,Edit3,Save,X,Search,RefreshCw,AlertTriangle,CheckCircle,ChevronDown,ChevronRight}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const StatuteNameNormalizer=_ref=>{let{config}=_ref;const[statuteGroups,setStatuteGroups]=useState([]);const[loading,setLoading]=useState(false);const[searchTerm,setSearchTerm]=useState('');const[editingId,setEditingId]=useState(null);const[editingName,setEditingName]=useState('');const[message,setMessage]=useState(null);const[selectedGroups,setSelectedGroups]=useState(new Set());const[batchEditMode,setBatchEditMode]=useState(false);const[batchNewName,setBatchNewName]=useState('');const[expandedGroups,setExpandedGroups]=useState(new Set());// Fetch statute groups from normalized collection\nconst fetchStatuteGroups=useCallback(async()=>{setLoading(true);try{const response=await fetch('/api/v1/phase2/preview-normalized-structure?limit=1000',{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(localStorage.getItem('token'))},body:JSON.stringify(config)});const data=await response.json();if(data.success&&data.preview_data){// Transform the data to match our interface\n// Backend returns 'statute_name' (lowercase), not 'Statute_Name'\nconst groups=data.preview_data.map(statute=>({_id:statute.statute_name||'Unknown',// Use statute_name as ID since it's unique\nStatute_Name:statute.statute_name||'Unknown',// Map to our interface\nSections:statute.sections_preview||[],// Backend returns sections_preview\nsection_count:statute.section_count||0}));setStatuteGroups(groups);}else{setMessage({type:'error',text:'Failed to fetch statute groups'});}}catch(error){setMessage({type:'error',text:'Error fetching statute groups'});}finally{setLoading(false);}},[config]);// Update a statute name (this would need a new backend endpoint)\nconst updateStatuteName=async(oldName,newName)=>{try{// For now, show a message that this feature needs backend implementation\nsetMessage({type:'error',text:'Statute name editing requires backend implementation for the new grouped schema'});// TODO: Implement backend endpoint to update statute names in grouped structure\n// This would need to:\n// 1. Find all documents with the old statute name\n// 2. Update the Statute_Name field\n// 3. Re-run normalization if needed\n}catch(error){setMessage({type:'error',text:'Error updating statute name'});}};// Handle edit start\nconst startEdit=statuteGroup=>{setEditingId(statuteGroup._id);setEditingName(statuteGroup.Statute_Name);};// Handle edit save\nconst saveEdit=async()=>{if(editingId&&editingName.trim()){await updateStatuteName(editingId,editingName.trim());setEditingId(null);setEditingName('');}};// Handle edit cancel\nconst cancelEdit=()=>{setEditingId(null);setEditingName('');};// Handle group selection\nconst toggleSelection=groupId=>{const newSelection=new Set(selectedGroups);if(newSelection.has(groupId)){newSelection.delete(groupId);}else{newSelection.add(groupId);}setSelectedGroups(newSelection);};// Handle batch edit\nconst handleBatchEdit=async()=>{if(selectedGroups.size===0||!batchNewName.trim()){setMessage({type:'error',text:'Please select groups and enter a new name'});return;}// For now, show a message that this feature needs backend implementation\nsetMessage({type:'error',text:'Batch editing requires backend implementation for the new grouped schema'});};// Toggle group expansion\nconst toggleGroupExpansion=groupId=>{const newExpanded=new Set(expandedGroups);if(newExpanded.has(groupId)){newExpanded.delete(groupId);}else{newExpanded.add(groupId);}setExpandedGroups(newExpanded);};// Filter statutes based on search term\nconst filteredStatutes=statuteGroups.filter(statute=>{// Add safe checks before calling string methods\nif(!statute.Statute_Name||typeof statute.Statute_Name!=='string'){return false;// Skip statutes with invalid names\n}return statute.Statute_Name.toLowerCase().includes(searchTerm.toLowerCase());});useEffect(()=>{fetchStatuteGroups();},[fetchStatuteGroups]);return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"text-xl font-semibold text-gray-900 mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(FileText,{className:\"w-5 h-5 mr-2\"}),\"Statute Names - Grouped View\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"View and manage statute names in the new grouped structure. Each statute contains multiple sections.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-wrap gap-4 items-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex-1 min-w-64\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative\",children:[/*#__PURE__*/_jsx(Search,{className:\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search statute names...\",value:searchTerm,onChange:e=>setSearchTerm(e.target.value),className:\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"})]})}),/*#__PURE__*/_jsxs(\"button\",{onClick:fetchStatuteGroups,disabled:loading,className:\"bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 disabled:opacity-50 flex items-center\",children:[/*#__PURE__*/_jsx(RefreshCw,{className:\"w-4 h-4 mr-2 \".concat(loading?'animate-spin':'')}),\"Refresh\"]})]})]}),selectedGroups.size>0&&/*#__PURE__*/_jsx(\"div\",{className:\"bg-blue-50 border border-blue-200 rounded-lg p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-blue-800\",children:[selectedGroups.size,\" statute group(s) selected\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"New statute name...\",value:batchNewName,onChange:e=>setBatchNewName(e.target.value),className:\"px-3 py-1 border border-blue-300 rounded focus:ring-2 focus:ring-blue-500\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleBatchEdit,className:\"bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700\",children:[/*#__PURE__*/_jsx(Save,{className:\"w-4 h-4 mr-1\"}),\"Update Selected\"]})]})]})}),message&&/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 rounded-lg flex items-center \".concat(message.type==='success'?'bg-green-50 text-green-800':'bg-red-50 text-red-800'),children:[message.type==='success'?/*#__PURE__*/_jsx(CheckCircle,{className:\"w-5 h-5 mr-2\"}):/*#__PURE__*/_jsx(AlertTriangle,{className:\"w-5 h-5 mr-2\"}),message.text]}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-white rounded-lg shadow\",children:loading?/*#__PURE__*/_jsxs(\"div\",{className:\"p-8 text-center text-gray-500\",children:[/*#__PURE__*/_jsx(RefreshCw,{className:\"w-8 h-8 mx-auto mb-2 animate-spin\"}),\"Loading statute groups...\"]}):filteredStatutes.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"p-8 text-center text-gray-500\",children:searchTerm?'No statutes found matching your search.':'No statute groups found.'}):/*#__PURE__*/_jsx(\"div\",{className:\"divide-y divide-gray-200\",children:filteredStatutes.map(statute=>/*#__PURE__*/_jsxs(\"div\",{className:\"p-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedGroups.has(statute._id),onChange:()=>toggleSelection(statute._id),className:\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>toggleGroupExpansion(statute._id),className:\"flex items-center space-x-2 text-left hover:text-blue-600\",children:[expandedGroups.has(statute._id)?/*#__PURE__*/_jsx(ChevronDown,{className:\"w-4 h-4\"}):/*#__PURE__*/_jsx(ChevronRight,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-gray-900\",children:statute.Statute_Name}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-500\",children:[\"(\",statute.section_count,\" sections)\"]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center space-x-2\",children:editingId===statute._id?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:editingName,onChange:e=>setEditingName(e.target.value),className:\"px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500\"}),/*#__PURE__*/_jsx(\"button\",{onClick:saveEdit,className:\"text-green-600 hover:text-green-800\",children:/*#__PURE__*/_jsx(Save,{className:\"w-4 h-4\"})}),/*#__PURE__*/_jsx(\"button\",{onClick:cancelEdit,className:\"text-gray-600 hover:text-gray-800\",children:/*#__PURE__*/_jsx(X,{className:\"w-4 h-4\"})})]}):/*#__PURE__*/_jsx(\"button\",{onClick:()=>startEdit(statute),className:\"text-blue-600 hover:text-blue-800\",title:\"Edit statute name\",children:/*#__PURE__*/_jsx(Edit3,{className:\"w-4 h-4\"})})})]}),expandedGroups.has(statute._id)&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-3 ml-8 space-y-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600 font-medium\",children:\"Sections:\"}),statute.Sections&&statute.Sections.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\",children:statute.Sections.map((section,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-50 p-2 rounded text-sm\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-gray-700\",children:section.number||\"Section \".concat(index+1)}),/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-600 truncate\",children:section.definition||section.content||'No content'})]},index))}):/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-500 text-sm\",children:\"No sections found\"})]})]},statute._id))})}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-50 rounded-lg p-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[\"Total: \",filteredStatutes.length,\" statute group(s)\",searchTerm&&\" (filtered from \".concat(statuteGroups.length,\" total)\")]})})]});};export default StatuteNameNormalizer;","map":{"version":3,"names":["React","useState","useEffect","useCallback","FileText","Edit3","Save","X","Search","RefreshCw","AlertTriangle","CheckCircle","ChevronDown","ChevronRight","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","StatuteNameNormalizer","_ref","config","statuteGroups","setStatuteGroups","loading","setLoading","searchTerm","setSearchTerm","editingId","setEditingId","editingName","setEditingName","message","setMessage","selectedGroups","setSelectedGroups","Set","batchEditMode","setBatchEditMode","batchNewName","setBatchNewName","expandedGroups","setExpandedGroups","fetchStatuteGroups","response","fetch","method","headers","concat","localStorage","getItem","body","JSON","stringify","data","json","success","preview_data","groups","map","statute","_id","statute_name","Statute_Name","Sections","sections_preview","section_count","type","text","error","updateStatuteName","oldName","newName","startEdit","statuteGroup","saveEdit","trim","cancelEdit","toggleSelection","groupId","newSelection","has","delete","add","handleBatchEdit","size","toggleGroupExpansion","newExpanded","filteredStatutes","filter","toLowerCase","includes","className","children","placeholder","value","onChange","e","target","onClick","disabled","length","checked","title","section","index","number","definition","content"],"sources":["D:/DigiFloat/LawChronicle/frontend/src/components/phase2/StatuteNameNormalizer.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { FileText, Edit3, Save, X, Search, RefreshCw, AlertTriangle, CheckCircle, Eye, ChevronDown, ChevronRight } from 'lucide-react';\n\ninterface StatuteGroup {\n  _id: string;\n  Statute_Name: string;\n  Sections: any[];\n  section_count: number;\n}\n\ninterface StatuteNameNormalizerProps {\n  config: {\n    source_collection: string;\n    target_collection: string;\n    database_name?: string;\n    cleaned_collection: string;\n    sorted_collection: string;\n  };\n}\n\nconst StatuteNameNormalizer: React.FC<StatuteNameNormalizerProps> = ({ config }) => {\n  const [statuteGroups, setStatuteGroups] = useState<StatuteGroup[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editingName, setEditingName] = useState('');\n  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);\n  const [selectedGroups, setSelectedGroups] = useState<Set<string>>(new Set());\n  const [batchEditMode, setBatchEditMode] = useState(false);\n  const [batchNewName, setBatchNewName] = useState('');\n  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set());\n\n  // Fetch statute groups from normalized collection\n  const fetchStatuteGroups = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/phase2/preview-normalized-structure?limit=1000', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(config)\n      });\n      const data = await response.json();\n      \n      if (data.success && data.preview_data) {\n        // Transform the data to match our interface\n        // Backend returns 'statute_name' (lowercase), not 'Statute_Name'\n        const groups = data.preview_data.map((statute: any) => ({\n          _id: statute.statute_name || 'Unknown', // Use statute_name as ID since it's unique\n          Statute_Name: statute.statute_name || 'Unknown', // Map to our interface\n          Sections: statute.sections_preview || [], // Backend returns sections_preview\n          section_count: statute.section_count || 0\n        }));\n        setStatuteGroups(groups);\n      } else {\n        setMessage({ type: 'error', text: 'Failed to fetch statute groups' });\n      }\n    } catch (error) {\n      setMessage({ type: 'error', text: 'Error fetching statute groups' });\n    } finally {\n      setLoading(false);\n    }\n  }, [config]);\n\n  // Update a statute name (this would need a new backend endpoint)\n  const updateStatuteName = async (oldName: string, newName: string) => {\n    try {\n      // For now, show a message that this feature needs backend implementation\n      setMessage({ \n        type: 'error', \n        text: 'Statute name editing requires backend implementation for the new grouped schema' \n      });\n      \n      // TODO: Implement backend endpoint to update statute names in grouped structure\n      // This would need to:\n      // 1. Find all documents with the old statute name\n      // 2. Update the Statute_Name field\n      // 3. Re-run normalization if needed\n      \n    } catch (error) {\n      setMessage({ type: 'error', text: 'Error updating statute name' });\n    }\n  };\n\n  // Handle edit start\n  const startEdit = (statuteGroup: StatuteGroup) => {\n    setEditingId(statuteGroup._id);\n    setEditingName(statuteGroup.Statute_Name);\n  };\n\n  // Handle edit save\n  const saveEdit = async () => {\n    if (editingId && editingName.trim()) {\n      await updateStatuteName(editingId, editingName.trim());\n      setEditingId(null);\n      setEditingName('');\n    }\n  };\n\n  // Handle edit cancel\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditingName('');\n  };\n\n  // Handle group selection\n  const toggleSelection = (groupId: string) => {\n    const newSelection = new Set(selectedGroups);\n    if (newSelection.has(groupId)) {\n      newSelection.delete(groupId);\n    } else {\n      newSelection.add(groupId);\n    }\n    setSelectedGroups(newSelection);\n  };\n\n  // Handle batch edit\n  const handleBatchEdit = async () => {\n    if (selectedGroups.size === 0 || !batchNewName.trim()) {\n      setMessage({ type: 'error', text: 'Please select groups and enter a new name' });\n      return;\n    }\n\n    // For now, show a message that this feature needs backend implementation\n    setMessage({ \n      type: 'error', \n      text: 'Batch editing requires backend implementation for the new grouped schema' \n    });\n  };\n\n  // Toggle group expansion\n  const toggleGroupExpansion = (groupId: string) => {\n    const newExpanded = new Set(expandedGroups);\n    if (newExpanded.has(groupId)) {\n      newExpanded.delete(groupId);\n    } else {\n      newExpanded.add(groupId);\n    }\n    setExpandedGroups(newExpanded);\n  };\n\n  // Filter statutes based on search term\n  const filteredStatutes = statuteGroups.filter(statute => {\n    // Add safe checks before calling string methods\n    if (!statute.Statute_Name || typeof statute.Statute_Name !== 'string') {\n      return false; // Skip statutes with invalid names\n    }\n    return statute.Statute_Name.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  useEffect(() => {\n    fetchStatuteGroups();\n  }, [fetchStatuteGroups]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n          <FileText className=\"w-5 h-5 mr-2\" />\n          Statute Names - Grouped View\n        </h2>\n        <p className=\"text-gray-600 mb-4\">\n          View and manage statute names in the new grouped structure. Each statute contains multiple sections.\n        </p>\n        \n        {/* Search and Controls */}\n        <div className=\"flex flex-wrap gap-4 items-center\">\n          <div className=\"flex-1 min-w-64\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search statute names...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n          </div>\n          \n          <button\n            onClick={fetchStatuteGroups}\n            disabled={loading}\n            className=\"bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 disabled:opacity-50 flex items-center\"\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* Batch Edit Controls */}\n      {selectedGroups.size > 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-blue-800\">\n              {selectedGroups.size} statute group(s) selected\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"text\"\n                placeholder=\"New statute name...\"\n                value={batchNewName}\n                onChange={(e) => setBatchNewName(e.target.value)}\n                className=\"px-3 py-1 border border-blue-300 rounded focus:ring-2 focus:ring-blue-500\"\n              />\n              <button\n                onClick={handleBatchEdit}\n                className=\"bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700\"\n              >\n                <Save className=\"w-4 h-4 mr-1\" />\n                Update Selected\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Message Display */}\n      {message && (\n        <div className={`p-4 rounded-lg flex items-center ${\n          message.type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'\n        }`}>\n          {message.type === 'success' ? (\n            <CheckCircle className=\"w-5 h-5 mr-2\" />\n          ) : (\n            <AlertTriangle className=\"w-5 h-5 mr-2\" />\n          )}\n          {message.text}\n        </div>\n      )}\n\n      {/* Statute Groups List */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {loading ? (\n          <div className=\"p-8 text-center text-gray-500\">\n            <RefreshCw className=\"w-8 h-8 mx-auto mb-2 animate-spin\" />\n            Loading statute groups...\n          </div>\n        ) : filteredStatutes.length === 0 ? (\n          <div className=\"p-8 text-center text-gray-500\">\n            {searchTerm ? 'No statutes found matching your search.' : 'No statute groups found.'}\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {filteredStatutes.map((statute) => (\n              <div key={statute._id} className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedGroups.has(statute._id)}\n                      onChange={() => toggleSelection(statute._id)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    \n                    <button\n                      onClick={() => toggleGroupExpansion(statute._id)}\n                      className=\"flex items-center space-x-2 text-left hover:text-blue-600\"\n                    >\n                      {expandedGroups.has(statute._id) ? (\n                        <ChevronDown className=\"w-4 h-4\" />\n                      ) : (\n                        <ChevronRight className=\"w-4 h-4\" />\n                      )}\n                      <span className=\"font-medium text-gray-900\">{statute.Statute_Name}</span>\n                      <span className=\"text-sm text-gray-500\">({statute.section_count} sections)</span>\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {editingId === statute._id ? (\n                      <>\n                        <input\n                          type=\"text\"\n                          value={editingName}\n                          onChange={(e) => setEditingName(e.target.value)}\n                          className=\"px-2 py-1 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500\"\n                        />\n                        <button\n                          onClick={saveEdit}\n                          className=\"text-green-600 hover:text-green-800\"\n                        >\n                          <Save className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={cancelEdit}\n                          className=\"text-gray-600 hover:text-gray-800\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </>\n                    ) : (\n                      <button\n                        onClick={() => startEdit(statute)}\n                        className=\"text-blue-600 hover:text-blue-800\"\n                        title=\"Edit statute name\"\n                      >\n                        <Edit3 className=\"w-4 h-4\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Expanded Sections View */}\n                {expandedGroups.has(statute._id) && (\n                  <div className=\"mt-3 ml-8 space-y-2\">\n                    <div className=\"text-sm text-gray-600 font-medium\">Sections:</div>\n                    {statute.Sections && statute.Sections.length > 0 ? (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\n                        {statute.Sections.map((section: any, index: number) => (\n                          <div key={index} className=\"bg-gray-50 p-2 rounded text-sm\">\n                            <div className=\"font-medium text-gray-700\">\n                              {section.number || `Section ${index + 1}`}\n                            </div>\n                            <div className=\"text-gray-600 truncate\">\n                              {section.definition || section.content || 'No content'}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-gray-500 text-sm\">No sections found</div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Summary */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <div className=\"text-sm text-gray-600\">\n          Total: {filteredStatutes.length} statute group(s)\n          {searchTerm && ` (filtered from ${statuteGroups.length} total)`}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StatuteNameNormalizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}