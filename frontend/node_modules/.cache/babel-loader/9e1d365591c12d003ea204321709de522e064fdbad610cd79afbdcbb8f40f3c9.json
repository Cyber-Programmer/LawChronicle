{"ast":null,"code":"import _objectSpread from\"D:/DigiFloat/LawChronicle/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Phase 5 API service for statute grouping operations\nconst API_BASE='http://localhost:8000/api/v1/phase5';export class Phase5ApiService{static getAuthToken(){return localStorage.getItem('token');}static async makeRequest(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const token=this.getAuthToken();const response=await fetch(\"\".concat(API_BASE).concat(endpoint),_objectSpread(_objectSpread({},options),{},{headers:_objectSpread(_objectSpread({'Content-Type':'application/json'},token&&{'Authorization':\"Bearer \".concat(token)}),options.headers)}));if(!response.ok){const errorData=await response.json().catch(()=>({detail:'Unknown error'}));throw new Error(errorData.detail||\"Request failed: \".concat(response.statusText));}return response.json();}// Get current Phase 5 status\nstatic async getStatus(collection){const params=collection?\"?collection=\".concat(encodeURIComponent(collection)):'';return this.makeRequest(\"/status\".concat(params));}// Start the grouping process\nstatic async startGrouping(){let request=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return this.makeRequest('/start-grouping',{method:'POST',body:JSON.stringify(request)});}// Get progress stream using Server-Sent Events\nstatic createProgressStream(){const token=this.getAuthToken();const url=new URL(\"\".concat(API_BASE,\"/progress-stream\"));if(token){url.searchParams.append('token',token);}return new EventSource(url.toString());}// Get grouped statutes (paginated)\nstatic async getGroups(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let filters=arguments.length>2?arguments[2]:undefined;const params=new URLSearchParams({page:page.toString(),limit:limit.toString()});if(filters){Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;if(value)params.append(key,value);});}return this.makeRequest(\"/groups?\".concat(params));}// Get statutes within a specific group\nstatic async getGroupedStatutes(groupId){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:20;const params=new URLSearchParams({page:page.toString(),limit:limit.toString()});return this.makeRequest(\"/groups/\".concat(groupId,\"/statutes?\").concat(params));}// Clear all grouping data (for development/testing)\nstatic async clearGroups(){return this.makeRequest('/clear',{method:'POST'});}// Get grouping statistics\nstatic async getStatistics(){return this.makeRequest('/statistics');}// Export grouped data\nstatic async exportGroups(){let format=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'json';const token=this.getAuthToken();const response=await fetch(\"\".concat(API_BASE,\"/export?format=\").concat(format),{headers:_objectSpread({},token&&{'Authorization':\"Bearer \".concat(token)})});if(!response.ok){throw new Error(\"Export failed: \".concat(response.statusText));}return response.blob();}// Get available collections\nstatic async getCollections(){const response=await this.makeRequest('/collections');return response.data;}// Get available provinces\nstatic async getProvinces(){const response=await this.makeRequest('/provinces');return response.data;}// ===== ENHANCED INTELLIGENT ANALYSIS METHODS =====\n// Analyze a single statute for constitutional lineage and legal context\nstatic async analyzeStatute(statute){const response=await this.makeRequest('/analyze-statute',{method:'POST',body:JSON.stringify({statute})});return response.data;}// Detect amendment chains in a collection\nstatic async detectAmendmentChains(collectionName){const response=await this.makeRequest('/detect-amendment-chains',{method:'POST',body:JSON.stringify({collection_name:collectionName})});return response.data;}// Get detailed statistics for a collection\nstatic async getCollectionStatistics(collectionName){const response=await this.makeRequest(\"/statistics/\".concat(encodeURIComponent(collectionName)));return response.data;}// Export groups with enhanced options\nstatic async exportGroupsEnhanced(format,collectionName){let includeAnalysis=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let filters=arguments.length>3?arguments[3]:undefined;const response=await this.makeRequest('/export-groups',{method:'POST',body:JSON.stringify({format,collection_name:collectionName,include_analysis:includeAnalysis,filters})});return response.data;}// Batch analyze multiple statutes\nstatic async batchAnalyzeStatutes(statutes){let batchSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;const results=[];for(let i=0;i<statutes.length;i+=batchSize){const batch=statutes.slice(i,i+batchSize);const batchPromises=batch.map(statute=>this.analyzeStatute(statute).catch(error=>{console.warn(\"Failed to analyze statute \".concat(statute._id,\":\"),error);return null;// Return null for failed analyses\n}));const batchResults=await Promise.all(batchPromises);results.push(...batchResults.filter(result=>result!==null));// Add small delay between batches to avoid overwhelming the API\nif(i+batchSize<statutes.length){await new Promise(resolve=>setTimeout(resolve,500));}}return results;}// Download file helper for exports\nstatic async downloadExport(exportData,filename,format){try{let content;let mimeType;if(format==='json'){content=JSON.stringify(exportData,null,2);mimeType='application/json';}else{// csv\ncontent=this.convertToCSV(exportData.groups||exportData);mimeType='text/csv';}const blob=new Blob([content],{type:mimeType});const url=window.URL.createObjectURL(blob);const link=document.createElement('a');link.href=url;link.download=\"\".concat(filename,\".\").concat(format);document.body.appendChild(link);link.click();document.body.removeChild(link);window.URL.revokeObjectURL(url);}catch(error){console.error('Failed to download export:',error);throw error;}}// Convert data to CSV format\nstatic convertToCSV(data){if(!data||!Array.isArray(data)||data.length===0){return'';}// Get headers from first object\nconst headers=Object.keys(data[0]);const csvRows=[];// Add header row\ncsvRows.push(headers.join(','));// Add data rows\nfor(const row of data){const values=headers.map(header=>{const value=row[header];// Handle values that might contain commas or quotes\nif(typeof value==='string'&&(value.includes(',')||value.includes('\"'))){return\"\\\"\".concat(value.replace(/\"/g,'\"\"'),\"\\\"\");}return value||'';});csvRows.push(values.join(','));}return csvRows.join('\\n');}}","map":{"version":3,"names":["API_BASE","Phase5ApiService","getAuthToken","localStorage","getItem","makeRequest","endpoint","options","arguments","length","undefined","token","response","fetch","concat","_objectSpread","headers","ok","errorData","json","catch","detail","Error","statusText","getStatus","collection","params","encodeURIComponent","startGrouping","request","method","body","JSON","stringify","createProgressStream","url","URL","searchParams","append","EventSource","toString","getGroups","page","limit","filters","URLSearchParams","Object","entries","forEach","_ref","key","value","getGroupedStatutes","groupId","clearGroups","getStatistics","exportGroups","format","blob","getCollections","data","getProvinces","analyzeStatute","statute","detectAmendmentChains","collectionName","collection_name","getCollectionStatistics","exportGroupsEnhanced","includeAnalysis","include_analysis","batchAnalyzeStatutes","statutes","batchSize","results","i","batch","slice","batchPromises","map","error","console","warn","_id","batchResults","Promise","all","push","filter","result","resolve","setTimeout","downloadExport","exportData","filename","content","mimeType","convertToCSV","groups","Blob","type","window","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","Array","isArray","keys","csvRows","join","row","values","header","includes","replace"],"sources":["D:/DigiFloat/LawChronicle/frontend/src/components/phase5/apiService.ts"],"sourcesContent":["// Phase 5 API service for statute grouping operations\r\n\r\nimport type { \r\n  Phase5Status, \r\n  StartGroupingRequest, \r\n  StartGroupingResponse,\r\n  GroupsResponse,\r\n  GroupedStatutesResponse\r\n} from './types';\r\n\r\nconst API_BASE = 'http://localhost:8000/api/v1/phase5';\r\n\r\nexport class Phase5ApiService {\r\n  private static getAuthToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  private static async makeRequest<T>(\r\n    endpoint: string, \r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    const token = this.getAuthToken();\r\n    const response = await fetch(`${API_BASE}${endpoint}`, {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\r\n      throw new Error(errorData.detail || `Request failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // Get current Phase 5 status\r\n  static async getStatus(collection?: string): Promise<Phase5Status> {\r\n    const params = collection ? `?collection=${encodeURIComponent(collection)}` : '';\r\n    return this.makeRequest<Phase5Status>(`/status${params}`);\r\n  }\r\n\r\n  // Start the grouping process\r\n  static async startGrouping(request: StartGroupingRequest = {}): Promise<StartGroupingResponse> {\r\n    return this.makeRequest<StartGroupingResponse>('/start-grouping', {\r\n      method: 'POST',\r\n      body: JSON.stringify(request),\r\n    });\r\n  }\r\n\r\n  // Get progress stream using Server-Sent Events\r\n  static createProgressStream(): EventSource {\r\n    const token = this.getAuthToken();\r\n    const url = new URL(`${API_BASE}/progress-stream`);\r\n    if (token) {\r\n      url.searchParams.append('token', token);\r\n    }\r\n    return new EventSource(url.toString());\r\n  }\r\n\r\n  // Get grouped statutes (paginated)\r\n  static async getGroups(\r\n    page: number = 1, \r\n    limit: number = 20,\r\n    filters?: {\r\n      province?: string;\r\n      statute_type?: string;\r\n      base_name?: string;\r\n    }\r\n  ): Promise<GroupsResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString(),\r\n    });\r\n\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value) params.append(key, value);\r\n      });\r\n    }\r\n\r\n    return this.makeRequest<GroupsResponse>(`/groups?${params}`);\r\n  }\r\n\r\n  // Get statutes within a specific group\r\n  static async getGroupedStatutes(\r\n    groupId: string,\r\n    page: number = 1,\r\n    limit: number = 20\r\n  ): Promise<GroupedStatutesResponse> {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      limit: limit.toString(),\r\n    });\r\n\r\n    return this.makeRequest<GroupedStatutesResponse>(`/groups/${groupId}/statutes?${params}`);\r\n  }\r\n\r\n  // Clear all grouping data (for development/testing)\r\n  static async clearGroups(): Promise<{ success: boolean; message: string }> {\r\n    return this.makeRequest('/clear', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  // Get grouping statistics\r\n  static async getStatistics(): Promise<{\r\n    total_groups: number;\r\n    total_statutes: number;\r\n    groups_by_province: Record<string, number>;\r\n    groups_by_type: Record<string, number>;\r\n    average_versions_per_group: number;\r\n  }> {\r\n    return this.makeRequest('/statistics');\r\n  }\r\n\r\n  // Export grouped data\r\n  static async exportGroups(format: 'json' | 'csv' = 'json'): Promise<Blob> {\r\n    const token = this.getAuthToken();\r\n    const response = await fetch(`${API_BASE}/export?format=${format}`, {\r\n      headers: {\r\n        ...(token && { 'Authorization': `Bearer ${token}` }),\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Export failed: ${response.statusText}`);\r\n    }\r\n\r\n    return response.blob();\r\n  }\r\n\r\n  // Get available collections\r\n  static async getCollections(): Promise<{ collections: string[] }> {\r\n    const response = await this.makeRequest<{ success: boolean; data: { collections: string[] } }>('/collections');\r\n    return response.data;\r\n  }\r\n\r\n  // Get available provinces\r\n  static async getProvinces(): Promise<{ provinces: string[] }> {\r\n    const response = await this.makeRequest<{ success: boolean; data: { provinces: string[] } }>('/provinces');\r\n    return response.data;\r\n  }\r\n\r\n  // ===== ENHANCED INTELLIGENT ANALYSIS METHODS =====\r\n\r\n  // Analyze a single statute for constitutional lineage and legal context\r\n  static async analyzeStatute(statute: any): Promise<{\r\n    constitutional_analysis: any;\r\n    legal_context: any;\r\n    statute_id: string;\r\n    analysis_timestamp: string;\r\n  }> {\r\n    const response = await this.makeRequest<{ \r\n      success: boolean; \r\n      data: {\r\n        constitutional_analysis: any;\r\n        legal_context: any;\r\n        statute_id: string;\r\n        analysis_timestamp: string;\r\n      }\r\n    }>('/analyze-statute', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ statute }),\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Detect amendment chains in a collection\r\n  static async detectAmendmentChains(collectionName: string): Promise<{\r\n    chains: any[];\r\n    total_chains: number;\r\n    collection_name: string;\r\n    analysis_timestamp: string;\r\n  }> {\r\n    const response = await this.makeRequest<{ \r\n      success: boolean; \r\n      data: {\r\n        chains: any[];\r\n        total_chains: number;\r\n        collection_name: string;\r\n        analysis_timestamp: string;\r\n      }\r\n    }>('/detect-amendment-chains', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ collection_name: collectionName }),\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Get detailed statistics for a collection\r\n  static async getCollectionStatistics(collectionName: string): Promise<{\r\n    total_statutes: number;\r\n    province_distribution: Array<{ province: string; count: number }>;\r\n    type_distribution: Array<{ type: string; count: number }>;\r\n    year_distribution: Array<{ year: string; count: number }>;\r\n    collection_name: string;\r\n    timestamp: string;\r\n    constitutional_amendments?: number;\r\n    amendment_chains?: number;\r\n  }> {\r\n    const response = await this.makeRequest<{ \r\n      success: boolean; \r\n      data: any \r\n    }>(`/statistics/${encodeURIComponent(collectionName)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Export groups with enhanced options\r\n  static async exportGroupsEnhanced(\r\n    format: 'json' | 'csv',\r\n    collectionName: string,\r\n    includeAnalysis: boolean = false,\r\n    filters?: any\r\n  ): Promise<{\r\n    export_timestamp: string;\r\n    collection_name: string;\r\n    format: string;\r\n    include_analysis: boolean;\r\n    groups: any[];\r\n    metadata: {\r\n      total_groups: number;\r\n      total_statutes: number;\r\n      export_version: string;\r\n    };\r\n  }> {\r\n    const response = await this.makeRequest<{ \r\n      success: boolean; \r\n      data: any \r\n    }>('/export-groups', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        format,\r\n        collection_name: collectionName,\r\n        include_analysis: includeAnalysis,\r\n        filters\r\n      }),\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  // Batch analyze multiple statutes\r\n  static async batchAnalyzeStatutes(statutes: any[], batchSize: number = 5): Promise<any[]> {\r\n    const results = [];\r\n    \r\n    for (let i = 0; i < statutes.length; i += batchSize) {\r\n      const batch = statutes.slice(i, i + batchSize);\r\n      const batchPromises = batch.map(statute => \r\n        this.analyzeStatute(statute).catch(error => {\r\n          console.warn(`Failed to analyze statute ${statute._id}:`, error);\r\n          return null; // Return null for failed analyses\r\n        })\r\n      );\r\n      \r\n      const batchResults = await Promise.all(batchPromises);\r\n      results.push(...batchResults.filter(result => result !== null));\r\n      \r\n      // Add small delay between batches to avoid overwhelming the API\r\n      if (i + batchSize < statutes.length) {\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  // Download file helper for exports\r\n  static async downloadExport(exportData: any, filename: string, format: 'json' | 'csv'): Promise<void> {\r\n    try {\r\n      let content: string;\r\n      let mimeType: string;\r\n\r\n      if (format === 'json') {\r\n        content = JSON.stringify(exportData, null, 2);\r\n        mimeType = 'application/json';\r\n      } else { // csv\r\n        content = this.convertToCSV(exportData.groups || exportData);\r\n        mimeType = 'text/csv';\r\n      }\r\n\r\n      const blob = new Blob([content], { type: mimeType });\r\n      const url = window.URL.createObjectURL(blob);\r\n      \r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${filename}.${format}`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Failed to download export:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Convert data to CSV format\r\n  private static convertToCSV(data: any[]): string {\r\n    if (!data || !Array.isArray(data) || data.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    // Get headers from first object\r\n    const headers = Object.keys(data[0]);\r\n    const csvRows = [];\r\n\r\n    // Add header row\r\n    csvRows.push(headers.join(','));\r\n\r\n    // Add data rows\r\n    for (const row of data) {\r\n      const values = headers.map(header => {\r\n        const value = row[header];\r\n        // Handle values that might contain commas or quotes\r\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\r\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return value || '';\r\n      });\r\n      csvRows.push(values.join(','));\r\n    }\r\n\r\n    return csvRows.join('\\n');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}