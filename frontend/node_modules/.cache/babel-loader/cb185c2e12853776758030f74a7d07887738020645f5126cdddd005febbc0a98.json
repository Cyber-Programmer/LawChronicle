{"ast":null,"code":"// Phase progress management utilities\nexport const PHASE_STATUS={LOCKED:'locked',READY:'ready',IN_PROGRESS:'in-progress',COMPLETED:'completed'};// Update phase progress in localStorage\nexport const updatePhaseProgress=(phaseId,status,progress)=>{try{const existingData=localStorage.getItem('phase_progress');const progressData=existingData?JSON.parse(existingData):{};progressData[phaseId]={status,progress};localStorage.setItem('phase_progress',JSON.stringify(progressData));}catch(error){console.error('Error updating phase progress:',error);}};// Get phase progress from localStorage\nexport const getPhaseProgress=phaseId=>{try{const existingData=localStorage.getItem('phase_progress');if(!existingData)return null;const progressData=JSON.parse(existingData);return progressData[phaseId]||null;}catch(error){console.error('Error getting phase progress:',error);return null;}};// Get all phase progress data\nexport const getAllPhaseProgress=()=>{try{const existingData=localStorage.getItem('phase_progress');return existingData?JSON.parse(existingData):{};}catch(error){console.error('Error getting all phase progress:',error);return{};}};// Mark phase as completed\nexport const completePhase=phaseId=>{updatePhaseProgress(phaseId,PHASE_STATUS.COMPLETED,100);};// Mark phase as in progress\nexport const startPhase=phaseId=>{updatePhaseProgress(phaseId,PHASE_STATUS.IN_PROGRESS,0);};// Update phase progress percentage\nexport const updatePhaseProgressPercentage=(phaseId,progress)=>{try{const existingData=localStorage.getItem('phase_progress');const progressData=existingData?JSON.parse(existingData):{};if(progressData[phaseId]){progressData[phaseId].progress=Math.min(100,Math.max(0,progress));localStorage.setItem('phase_progress',JSON.stringify(progressData));}}catch(error){console.error('Error updating phase progress percentage:',error);}};// Reset all phase progress\nexport const resetAllPhaseProgress=()=>{try{localStorage.removeItem('phase_progress');}catch(error){console.error('Error resetting phase progress:',error);}};// Check if a phase is completed\nexport const isPhaseCompleted=phaseId=>{const progress=getPhaseProgress(phaseId);return(progress===null||progress===void 0?void 0:progress.status)===PHASE_STATUS.COMPLETED;};// Check if a phase is ready to start\nexport const isPhaseReady=phaseId=>{const progress=getPhaseProgress(phaseId);return(progress===null||progress===void 0?void 0:progress.status)===PHASE_STATUS.READY;};// Check if a phase is in progress\nexport const isPhaseInProgress=phaseId=>{const progress=getPhaseProgress(phaseId);return(progress===null||progress===void 0?void 0:progress.status)===PHASE_STATUS.IN_PROGRESS;};// Check if a phase is locked\nexport const isPhaseLocked=phaseId=>{const progress=getPhaseProgress(phaseId);return(progress===null||progress===void 0?void 0:progress.status)===PHASE_STATUS.LOCKED;};","map":{"version":3,"names":["PHASE_STATUS","LOCKED","READY","IN_PROGRESS","COMPLETED","updatePhaseProgress","phaseId","status","progress","existingData","localStorage","getItem","progressData","JSON","parse","setItem","stringify","error","console","getPhaseProgress","getAllPhaseProgress","completePhase","startPhase","updatePhaseProgressPercentage","Math","min","max","resetAllPhaseProgress","removeItem","isPhaseCompleted","isPhaseReady","isPhaseInProgress","isPhaseLocked"],"sources":["D:/DigiFloat/LawChronicle/frontend/src/utils/phaseProgress.ts"],"sourcesContent":["// Phase progress management utilities\r\nexport const PHASE_STATUS = {\r\n  LOCKED: 'locked',\r\n  READY: 'ready',\r\n  IN_PROGRESS: 'in-progress',\r\n  COMPLETED: 'completed'\r\n};\r\n\r\nexport interface PhaseProgress {\r\n  status: string;\r\n  progress: number;\r\n}\r\n\r\nexport interface PhaseProgressData {\r\n  [phaseId: number]: PhaseProgress;\r\n}\r\n\r\n// Update phase progress in localStorage\r\nexport const updatePhaseProgress = (phaseId: number, status: string, progress: number): void => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    const progressData: PhaseProgressData = existingData ? JSON.parse(existingData) : {};\r\n    \r\n    progressData[phaseId] = { status, progress };\r\n    localStorage.setItem('phase_progress', JSON.stringify(progressData));\r\n  } catch (error) {\r\n    console.error('Error updating phase progress:', error);\r\n  }\r\n};\r\n\r\n// Get phase progress from localStorage\r\nexport const getPhaseProgress = (phaseId: number): PhaseProgress | null => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    if (!existingData) return null;\r\n    \r\n    const progressData: PhaseProgressData = JSON.parse(existingData);\r\n    return progressData[phaseId] || null;\r\n  } catch (error) {\r\n    console.error('Error getting phase progress:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Get all phase progress data\r\nexport const getAllPhaseProgress = (): PhaseProgressData => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    return existingData ? JSON.parse(existingData) : {};\r\n  } catch (error) {\r\n    console.error('Error getting all phase progress:', error);\r\n    return {};\r\n  }\r\n};\r\n\r\n// Mark phase as completed\r\nexport const completePhase = (phaseId: number): void => {\r\n  updatePhaseProgress(phaseId, PHASE_STATUS.COMPLETED, 100);\r\n};\r\n\r\n// Mark phase as in progress\r\nexport const startPhase = (phaseId: number): void => {\r\n  updatePhaseProgress(phaseId, PHASE_STATUS.IN_PROGRESS, 0);\r\n};\r\n\r\n// Update phase progress percentage\r\nexport const updatePhaseProgressPercentage = (phaseId: number, progress: number): void => {\r\n  try {\r\n    const existingData = localStorage.getItem('phase_progress');\r\n    const progressData: PhaseProgressData = existingData ? JSON.parse(existingData) : {};\r\n    \r\n    if (progressData[phaseId]) {\r\n      progressData[phaseId].progress = Math.min(100, Math.max(0, progress));\r\n      localStorage.setItem('phase_progress', JSON.stringify(progressData));\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating phase progress percentage:', error);\r\n  }\r\n};\r\n\r\n// Reset all phase progress\r\nexport const resetAllPhaseProgress = (): void => {\r\n  try {\r\n    localStorage.removeItem('phase_progress');\r\n  } catch (error) {\r\n    console.error('Error resetting phase progress:', error);\r\n  }\r\n};\r\n\r\n// Check if a phase is completed\r\nexport const isPhaseCompleted = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.COMPLETED;\r\n};\r\n\r\n// Check if a phase is ready to start\r\nexport const isPhaseReady = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.READY;\r\n};\r\n\r\n// Check if a phase is in progress\r\nexport const isPhaseInProgress = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.IN_PROGRESS;\r\n};\r\n\r\n// Check if a phase is locked\r\nexport const isPhaseLocked = (phaseId: number): boolean => {\r\n  const progress = getPhaseProgress(phaseId);\r\n  return progress?.status === PHASE_STATUS.LOCKED;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}